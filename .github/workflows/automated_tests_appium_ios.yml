#
# Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Beagle Appium iOS Tests

on:
  workflow_dispatch:
  workflow_run:
    workflows: [ "Beagle Appium tests trigger" ]
    types:
      - completed

jobs:
  compile_bff_project:
    name: Compile BFF project
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          submodules: 'true'

      - name: Update submodules
        run: git submodule update --init --recursive --remote

      - name: Print branch info
        run: git branch

      # Cache Gradle dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}

      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Setup JDK (11)
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Generate the BFF jar file
        run: |
          if ./bff-server/gradlew bootJar -p bff-server; then
            echo "Gradle task succeeded" >&2
          else
            echo "Gradle task failed" >&2
            exit 1
          fi

      - name: Upload the BFF jar file
        uses: actions/upload-artifact@v2
        with:
          name: bff-jar-file
          path: bff-server/bff/build/libs/bff.jar


  appium_tests:
    name: Tests job
    runs-on: macos-latest
    needs: compile_bff_project
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        ios-version: [ 10, 12.4, 14.4 ]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          submodules: 'true'

      - name: Update submodules
        run: git submodule update --init --recursive --remote

      - name: Print branch info
        run: git branch

      - name: Download the BFF jar file
        uses: actions/download-artifact@v2
        with:
          name: bff-jar-file

      - name: Start the BFF server
        run: nohup java -jar bff.jar 2>&1 &

      - name: Config and run the Appium server
        run: bash fastlane/automatedTests/appium/config_and_run_appium_server.sh

      - name: Returns the iOS device to be used based on the iOS version
        id: sets-ios-device
        env:
          IOS_VERSION: ${{ matrix.ios-version }}
        run: |
          case $IOS_VERSION in
          10) echo ::set-output name=result::"iPhone 7" ;;
          12.4) echo ::set-output name=result::"iPhone 11" ;;
          14.4) echo ::set-output name=result::"iPhone 11" ;;
          *) echo "Invalid option!" && exit 1 ;;
          esac

      - name: Config the simulator according to the iOS version
        env:
          IOS_VERSION: ${{ matrix.ios-version }}
        run: |
          case $IOS_VERSION in
          10)
            xcversion simulators --install='iOS 10.3.1'
            ls -la /Users/runner/Library/Caches/XcodeInstall/
            ls -la /Applications/
            sudo xcode-select --switch /Applications/Xcode_10.3.app/Contents/Developer
            xcrun simctl create TestiPhoneX com.apple.CoreSimulator.SimDeviceType.iPhone-7 com.apple.CoreSimulator.SimRuntime.iOS-10-3 > ~/deviceIdTemp.txt
            DEVICEUUID=`cat ~/deviceIdTemp.txt`
            xcrun simctl boot $DEVICEUUID
            sleep 30
            ;;
          12.4)
            echo "TODO" && exit 1
            ;;
          14.4)
            echo "TODO" && exit 1
            ;;
          *)
            echo "Invalid option!" && exit 1
            ;;
          esac

      # TODO: TRY TO MAKE THIS STEP IN ONE JOB (multiple dests or generic): https://mokacoding.com/blog/xcodebuild-destination-options/
      - name: Build the app-ios project to generate the app file
        env:
          DEVICE_NAME: ${{steps.sets-ios-device.outputs.result}}
          IOS_VERSION: ${{ matrix.ios-version }}
        run: |
          set -e
          echo "vars = $DEVICE_NAME and $IOS_VERSION"
          xcodebuild -showsdks
          xcodebuild -project appium/app-ios/AppiumApp/AppiumApp.xcodeproj -scheme AppiumApp -destination 'platform=iOS Simulator,name=iPhone 7,OS=10' -quiet


      ##################################################################################################
      # Emulator config - start
      ##################################################################################################

      #      - name: Prepare iOS 13.5 simulator
      #        run: |
      #          sudo mkdir -p /Library/Developer/CoreSimulator/Profiles/Runtimes
      #          # We use simulator 13.5 for the tests. It uses Xcode 11.5, according to https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md.
      #          # Since GitHub Actions uses another Xcode version, we need to make a symlink inside Xcode, pointing to the iOS version we want.
      #          # More details: https://github.com/actions/virtual-environments/issues/551#issuecomment-637344435
      #          sudo ln -s /Applications/Xcode_11.5.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS\ 13.5.simruntime
      #          xcrun simctl create TestiPhoneX com.apple.CoreSimulator.SimDeviceType.iPhone-11 com.apple.CoreSimulator.SimRuntime.iOS-13-5 > ~/deviceIdTemp.txt
      #          DEVICEUUID=`cat ~/deviceIdTemp.txt`
      #          xcrun simctl boot $DEVICEUUID
      #          sleep 30

      ##################################################################################################
      # Emulator config - end
      ##################################################################################################

      #      - name: Run the tests
      #        run: bash fastlane/automatedTests/appium/ios/run_appium_ios_tests.sh

      - name: Run the Appium test suite
        env:
          DEVICE_NAME: ${{steps.sets-ios-device.outputs.result}}
          IOS_VERSION: ${{ matrix.ios-version }}
        run: |
          APP_FILE=$(find ~/Library/Developer/Xcode/DerivedData -name AppiumApp.app | grep Build/Products/Debug-iphonesimulator/AppiumApp.app)
          echo ".app file found at: $APP_FILE"
          echo "Running Appium tests on device $DEVICE_NAME with iOS $IOS_VERSION..."
          if ./appium/project/gradlew --build-cache -p appium/project cucumber \
          -Dplatform="ios" \
          -Dplatform_version="$IOS_VERSION" \
          -Ddevice_name="$DEVICE_NAME" \
          -Dapp_file="$APP_FILE"; then
            echo "Gradle task succeeded" >&2
           else
            echo "Gradle task failed" >&2
            exit 1
           fi

      - name: Expose failed test screenshot files
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: failed_tests_screenshots
          path: appium/project/build/screenshots/

