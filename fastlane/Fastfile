###
###  Workflow
###
platform :workflow do
  desc "Open PR from patch"
  lane :openPRFromPatch do
    tagName = ENV["TAG_NAME"]
    if !tagName.index("-")
      puts "This release is not a hotfix."
      puts "Exiting..."
      next
    end
    branchName = tagName.split("/").last
    sh("git checkout -b hotfix/" + branchName)
    push_to_git_remote(
      tags: false,
      set_upstream: true
    )
    create_pull_request(
      api_token:ENV["REPO_TOKEN"],
      repo:ENV["REPO"],
      title:"fix: Merge #{branchName} patch with main",
      body: "Auto generated PR to merge fixes from #{branchName} into main."
      )
  end
end

###
###  Dangerfile
###
lane :run_danger do |options|
  danger_id = options[:danger_id] || lane_context[SharedValues::PLATFORM_NAME].to_s
  danger_file_path = options[:danger_file_path] || lane_context[SharedValues::PLATFORM_NAME].to_s
  danger(
    danger_id: danger_id,
    dangerfile: "danger/#{danger_file_path}/Dangerfile",
    github_api_token: ENV[
      "GITHUB_TOKEN"],
    verbose: true,
  )
end

###
###  Release Notes
###
desc "Generate release notes"
private_lane :release_notes do |params|
  get_previous_tag = lastExpectedVersion(newVersion:params[:versionDeploy])
  tagHashes = sh "git show-ref -s #{get_previous_tag}"

  lane_context[SharedValues::RELEASE_ANALYZED] = true
  lane_context[SharedValues::RELEASE_LAST_TAG_HASH] = tagHashes.split("\n").last
  lane_context[SharedValues::RELEASE_NEXT_VERSION] = params[:versionDeploy]
  lane_context[SharedValues::CONVENTIONAL_CHANGELOG_ACTION_FORMAT_PATTERN] = "(feat|fix|refactor|perf|chore|test|docs|no_type|ci)(:)()(.*)"
  sections = {
    feat: "Features",
    fix: "Bug fixes",
    refactor: "Code refactoring",
    perf: "Performance improvements",
    chore: "Building system",
    test: "Testing",
    docs: "Documentation",
    ci: "CI/CD",
    no_type: "Other work"
  }
  order = ["feat", "fix", "refactor", "perf", "chore", "test", "docs", "ci", "no_type"]
  changelog = conventional_changelog(sections: sections, order: order, display_title: false, display_links: false)
  changelog = changelog.gsub("**::**  ", "")
  "\nRelease notes #{params[:versionDeploy]}
   \nChanges:
   \n#{changelog}"
end

private_lane :danger_token_available? do
  danger = ENV["GITHUB_TOKEN"]
  !(danger.nil? || danger.empty?)
end

after_all do |lane, options|
  if lane == :pull_request_verification
    if danger_token_available?
      run_danger
    end
  end
end

error do |lane, exception, options|
  if lane == :pull_request_verification
    if danger_token_available?
      run_danger
    end
  end
end

# input: 1.2.0; output: 1.1.0
# input: 1.2.2; output: 1.2.1
# input: 1.2.3-iOS; output: 1.2.2-iOS
# input: 3.0.0; output: 2.0.0
lane :lastExpectedVersion do |params|
  platform = params[:newVersion].split("-")
  releaseNumberArray = platform.first.split(".")
  lastVersion = ""
  calculated = false
  for number in releaseNumberArray.reverse()
    intNumber = number.to_i
    if intNumber != 0 && !calculated
      intNumber -= 1
      calculated = true
    end
    lastVersion = ".#{intNumber}" + lastVersion
  end
  lastVersion[0] = ""

  version = ""
  if platform.length > 1 &&
    lastVersion.split(".").last != "0"
      version = "#{lastVersion}-#{platform[1]}"
  else
    version = lastVersion
  end
  "#{version}"
end